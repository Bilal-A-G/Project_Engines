//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/SomethingControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SomethingControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SomethingControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SomethingControls"",
    ""maps"": [
        {
            ""name"": ""Cringe"",
            ""id"": ""ddb641f0-2f64-4121-bb01-478d9e44b363"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""360ac23c-fd2a-459a-845f-5e454ac46329"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a99fc87c-4696-4bf9-ab9e-ecd29c9a6f80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""f36e3896-1e52-47ff-8161-2533d2e1d9bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2a59b9a-2dee-4520-8882-8c1c897f5849"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3b10fc0-20d7-4148-80a1-a12d67381991"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6837e811-9339-4830-a299-8e931c512337"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cringe
        m_Cringe = asset.FindActionMap("Cringe", throwIfNotFound: true);
        m_Cringe_Move = m_Cringe.FindAction("Move", throwIfNotFound: true);
        m_Cringe_Shoot = m_Cringe.FindAction("Shoot", throwIfNotFound: true);
        m_Cringe_Escape = m_Cringe.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cringe
    private readonly InputActionMap m_Cringe;
    private List<ICringeActions> m_CringeActionsCallbackInterfaces = new List<ICringeActions>();
    private readonly InputAction m_Cringe_Move;
    private readonly InputAction m_Cringe_Shoot;
    private readonly InputAction m_Cringe_Escape;
    public struct CringeActions
    {
        private @SomethingControls m_Wrapper;
        public CringeActions(@SomethingControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Cringe_Move;
        public InputAction @Shoot => m_Wrapper.m_Cringe_Shoot;
        public InputAction @Escape => m_Wrapper.m_Cringe_Escape;
        public InputActionMap Get() { return m_Wrapper.m_Cringe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CringeActions set) { return set.Get(); }
        public void AddCallbacks(ICringeActions instance)
        {
            if (instance == null || m_Wrapper.m_CringeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CringeActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(ICringeActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(ICringeActions instance)
        {
            if (m_Wrapper.m_CringeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICringeActions instance)
        {
            foreach (var item in m_Wrapper.m_CringeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CringeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CringeActions @Cringe => new CringeActions(this);
    public interface ICringeActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
